name: Build

on: [push, pull_request]

jobs:
  client:
    strategy:
      matrix:
        node-version:
          - '16.x'
        os:
          - 'ubuntu-latest'
          - 'windows-latest'
          - 'macos-latest'
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - uses: actions/cache@v2
      with:
        path: "**/node_modules"
        key: ${{ runner.os }}-${{ matrix.node-version }}-node_modules-${{ hashFiles('**/package-lock.json') }}
    - run: npm install
    - name: Typecheck with TypeScript
      run: npm run typecheck
    - name: Build client bundles
      run: npm run build --no-typecheck
    - name: Build JavaScript module
      run: npm run build-module --no-typecheck
    - name: Build Python client bundles
      run: npm run build-python --no-typecheck
    - run: sudo apt-get install xvfb
      if: startsWith(runner.os, 'Linux')
    - name: Run JavaScript tests (including WebGL)
      # Swiftshader, used by Chrome headless, crashes when running Neuroglancer
      # tests.
      #
      # The only reliable headless configuration is Firefox on Linux under
      # xvfb-run, which uses Mesa software rendering.
      if: startsWith(runner.os, 'Linux')
      run: xvfb-run --auto-servernum --server-args='-screen 0 1024x768x24' npm run test -- --browsers Firefox
    - name: Run JavaScript tests (excluding WebGL)
      if: ${{ !startsWith(runner.os, 'Linux') }}
      run: npm run test -- --browsers ChromeHeadless --define=NEUROGLANCER_SKIP_WEBGL_TESTS
    - name: Run JavaScript benchmarks
      run: npm run benchmark
  ngauth:
    strategy:
      matrix:
        go-version: ['1.14']
        os:
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Setup go ${{ matrix.go-version }}
      uses: actions/setup-go@v1
      with:
        go-version: ${{ matrix.go-version }}
    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-${{ matrix.go-version }}-go-${{ hashFiles('**/go.sum') }}
    - run: go build .
      working-directory: ngauth_server
  wasm:
    # Ensures that .wasm files are reproducible.
    strategy:
      matrix:
        os:
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - run: ./src/neuroglancer/mesh/draco/build.sh
    - run: ./src/neuroglancer/sliceview/compresso/build.sh
    - run: ./src/neuroglancer/sliceview/png/build.sh
    # Check that there are no differences.
    - run: git diff --exit-code
  build-and-deploy:
    strategy:
        matrix:
          node-version:
            - '16.x'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - uses: actions/cache@v2
      with:
        path: "**/node_modules"
        key: ${{ runner.os }}-${{ matrix.node-version }}-node_modules-${{ hashFiles('**/package-lock.json') }}
    - run: npm install
    - name: Typecheck with TypeScript
      run: npm run typecheck
    - name: Build client bundles
      run: node ./config/esbuild-cli.js --config=min --no-typecheck --define STATE_SERVERS=$(cat config/state_servers.json | tr -d " \t\n\r")
    - run: cp -r ./dist/min appengine/frontend/static/
    - name: Extract branch name
      id: get_branch
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/} | tr / - | tr _ -)"
    - run: echo ${{ steps.get_branch.outputs.branch }}
    - name: start deployment
      uses: bobheadxi/deployments@v0.5.2
      id: deployment
      with:
        step: start
        token: ${{ secrets.GITHUB_TOKEN }}
        env: ${{ steps.get_branch.outputs.branch }}
        desc: Setting up staging deployment for ${{ steps.get_branch.outputs.branch }}
    - id: deploy
      uses: google-github-actions/deploy-appengine@main
      with:
        credentials: ${{ secrets.SA_GOOGLE_APPS_DEPLOY }}
        version: ${{ steps.get_branch.outputs.branch }}
        deliverables: appengine/frontend/app.yaml
        promote: false
    - name: update deployment status
      uses: bobheadxi/deployments@v0.5.2
      if: always()
      with:
        step: finish
        token: ${{ secrets.GITHUB_TOKEN }}
        env: ${{ steps.deployment.outputs.env }}
        env_url: ${{ steps.deploy.outputs.url }}
        status: ${{ job.status }}
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
